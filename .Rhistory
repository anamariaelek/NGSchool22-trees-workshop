geom_tile() + scale_fill_viridis_c(direction = -1)
ggplot(hyper_grid, aes(minsplit, maxdepth, size=cp, fill = xerror)) +
geom_point() + coord_fixed() + scale_fill_viridis_c(direction = -1)
ggplot(hyper_grid, aes(minsplit, maxdepth, size=cp, color = xerror)) +
geom_point() + coord_fixed() + scale_color_viridis_c(direction = -1)
ggplot(hyper_grid, aes(minsplit, maxdepth, size=cp, color = xerror)) +
geom_point() + scale_color_viridis_c(direction = -1)
# plot grid search results
ggplot(hyper_grid, aes(cp, maxdepth, fill = xerror)) +
geom_tile() + scale_fill_viridis_c(direction = -1)
ggplot(hyper_grid, aes(minsplit, maxdepth, size=cp, color = xerror)) +
geom_point() + scale_color_viridis_c(direction = -1) + scale_size(range = c(0, 10))
ggplot(hyper_grid, aes(minsplit, maxdepth, size=cp, color = xerror)) +
geom_point() + scale_color_viridis_c(direction = -1) + scale_size(range = c(1, 10))
ggplot(hyper_grid, aes(minsplit, maxdepth, size=cp, color = xerror)) +
geom_point() + scale_color_viridis_c(direction = -1) + scale_size(range = c(1, 100))
ggplot(hyper_grid, aes(minsplit, maxdepth, size=cp, color = xerror)) +
geom_point() + scale_color_viridis_c(direction = -1) + scale_size(range = c(1, 20))
ggplot(hyper_grid, aes(minsplit, maxdepth, size=cp, color = xerror)) +
geom_point() + scale_color_viridis_c(direction = -1) + scale_size(limits = 0.01,1)
ggplot(hyper_grid, aes(minsplit, maxdepth, size=cp, color = xerror)) +
geom_point() + scale_color_viridis_c(direction = -1) + scale_size(limits = c(0.01,1))
ggplot(hyper_grid, aes(minsplit, maxdepth, size=cp, color = xerror)) +
geom_point() + scale_color_viridis_c(direction = -1) + scale_size(limits = c(0.01,0.5))
ggplot(hyper_grid, aes(minsplit, maxdepth, size=cp, color = xerror)) +
geom_point() + scale_color_viridis_c(direction = -1) + scale_size(limits = c(0.01,0.05))
ggplot(hyper_grid, aes(minsplit, maxdepth, size=cp, color = xerror)) +
geom_point() + scale_color_viridis_c(direction = -1) #+ scale_size(limits = c(0.01,0.05))
# plot grid search results
ggplot(hyper_grid, aes(cp, maxdepth, fill = xerror)) +
geom_tile() + scale_fill_viridis_c(direction = -1)
ggplot(hyper_grid, aes(minsplit, maxdepth, size=cp, color = xerror)) +
geom_point() + scale_color_viridis_c(direction = -1) + scale_size(limits = c(0.05,0.25))
ggplot(hyper_grid, aes(minsplit, maxdepth, size=cp, color = xerror)) +
geom_point() + scale_color_viridis_c(direction = -1) + scale_size(limits = c(0.1,0.25))
ggplot(hyper_grid, aes(minsplit, maxdepth, size=cp, color = xerror)) +
geom_point() + scale_color_viridis_c(direction = -1) + scale_size(limits = c(0,0.25))
hyper_grid
seq(0.01, 0.1, 0.02)
ggplot(hyper_grid, aes(minsplit, maxdepth, size=CP, color = xerror)) +
geom_point() + scale_color_viridis_c(direction = -1)
# plot grid search results
ggplot(hyper_grid, aes(minsplit, maxdepth, fill = xerror)) +
geom_tile() + scale_fill_viridis_c(direction = -1)
# plot grid search results
ggplot(hyper_grid, aes(minsplit, maxdepth, fill = xerror)) +
geom_tile() + scale_fill_viridis_c(direction = -1)
# plot grid search results
ggplot(hyper_grid, aes(minsplit, maxdepth, fill = xerror)) +
geom_tile() + coord_fixed() + scale_fill_viridis_c(direction = -1)
hyper_grid <- expand.grid(
minsplit = seq(20, 50, 2),
maxdepth = seq(20, 50, 2)
)
# total combinations
nrow(hyper_grid)
# loop over grid search
set.seed(1950)
tpm_list <- lapply(1:nrow(hyper_grid), function(i) {
# train a model
tpm_tree <- rpart(
formula = as.formula(paste(gene, "~ .", collapse = " ")),
data = tpm_train[, c(gene,tfs)],
method  = "anova",
control = list(
minsplit = hyper_grid$minsplit[i],
maxdepth = hyper_grid$maxdepth[i]
)
)
# get error
tpm_tree$cptable[which.min(tpm_tree$cptable[,"xerror"]),]
})
# merge results
tpm_cp <- do.call('rbind', tpm_list)
# add results to grid
hyper_grid <- cbind(hyper_grid, tpm_cp)
# save
fwrite(hyper_grid, file = sprintf("data/hypergrid.tree.%s.csv",gene))
hyper_grid <- fread(sprintf("data/hypergrid.tree.%s.csv",gene))
head(hyper_grid[order(xerror)])
# plot grid search results
ggplot(hyper_grid, aes(minsplit, maxdepth, fill = xerror)) +
geom_tile() + coord_fixed() + scale_fill_viridis_c(direction = -1)
# build the model using best parameters from grid search
i <- which.min(hyper_grid$xerror)
tpm_best_tree <- rpart(
formula = as.formula(paste(gene, "~ .", collapse = " ")),
data = tpm_train[, c(gene,tfs)],
method  = "anova",
control = list(
minsplit = hyper_grid$minsplit[i],
maxdepth = hyper_grid$maxdepth[i],
cp = hyper_grid$CP[i]
)
)
# plot tree
rpart.plot(tpm_tree)
hyper_grid$maxdepth
# plot tree
rpart.plot(tpm_tree)
hyper_grid$minsplit[i]
pred <- predict(tpm_best_tree, newdata = tpm_test[, tfs])
RMSE(pred = pred, obs = tpm_test[, gene])
pred_df <- data.frame(predicted=pred, actual=tpm_test[, gene])
ggplot(pred_df, aes(predicted, actual)) +
geom_point() +
geom_smooth(method='lm', formula=y~x)
require(ipred)
set.seed(1950)
# get OOB errors for models with range of bagged trees
nbagg <- seq(10, 200, 2)
rmse <- sapply(nbagg, function(i) {
bt <- bagging(
formula = as.formula(paste(gene, "~ .", collapse = " ")),
data = tpm_train[,c(gene,tfs)],
coob = TRUE,
nbagg = i
)
bt$err
})
rmse_df <- data.frame(nbagg, rmse)
# load precalculated values
rmse_df <- fread(sprintf("data/hypergrid.bagging.%s.csv",gene))
ggplot(rmse_df, aes(nbagg, rmse)) +
geom_line() +
geom_vline(xintercept = 25, col = "red")
# fit model using these parameters
ntree <- rmse_df[which.min(rmse_df$rmse),]$nbagg
bagging_tree <- bagging(
formula = as.formula(paste(gene, "~ .", collapse = " ")),
data = tpm_train[,c(gene,tfs)],
coob = TRUE,
nbagg = ntree
)
ggplot(rmse_df, aes(nbagg, rmse)) +
geom_line() +
geom_vline(xintercept = 50, col = "red")
pred <- predict(bagging_tree, newdata = tpm_test[, tfs])
RMSE(pred = pred, obs = tpm_test[, gene])
pred_df <- data.frame(predicted=pred, actual=tpm_test[, gene])
ggplot(pred_df, aes(predicted, actual)) +
geom_point() +
geom_smooth(method='lm', formula=y~x)
RMSE(pred = pred, obs = tpm_test[, gene])
pred <- predict(tpm_best_tree, newdata = tpm_test[, tfs])
RMSE(pred = pred, obs = tpm_test[, gene])
require(caret)
# set up a 10-fold cross validation
ctrl <- trainControl(method = "cv",  number = 10)
# CV bagged model
bagging_tree <- caret::train(
x = tpm_train[,tfs],
y = tpm_train[,gene],
method = "treebag",
num.trees = ntree,
trControl = ctrl,
importance = TRUE
)
# assess results
bagging_tree
# plot most important variables
plot(varImp(bagging_tree), 30)
# prediction
pred <- predict(bagging_tree, newdata = tpm_test[, tfs])
RMSE(pred = pred, obs = tpm_test[, gene])
library(bst)
# set up a 3-fold cross validation
ctrl <- trainControl(method = "cv",  number = 3)
seq(100,300,20)
# parameter grid search
hyper_grid <- expand.grid(
mstop = seq(100,200,10),
maxdepth = seq(20, 50, 2),
nu = c(0.001, 0.01, 0.1)
)
# total number of combinations
nrow(hyper_grid)
# parameter grid search
hyper_grid <- expand.grid(
mstop = seq(100, 200, 20),
maxdepth = seq(20, 50, 2),
nu = c(0.001, 0.01, 0.1)
)
# total number of combinations
nrow(hyper_grid)
# parameter grid search
hyper_grid <- expand.grid(
mstop = seq(100, 200, 20),
maxdepth = seq(30, 50, 2),
nu = c(0.001, 0.01, 0.1)
)
# total number of combinations
nrow(hyper_grid)
# build models without importance calculation
rf_tree <- caret::train(
x = tpm_train[,tfs],
y = tpm_train[,gene],
method = "ranger",
trControl = ctrl,
tuneGrid = hyper_grid,
num.trees =  300,
importance = "none"
)
# build models without importance calculation
rf_tree <- caret::train(
x = tpm_train[,tfs],
y = tpm_train[,gene],
method = "bstTree",
trControl = ctrl,
tuneGrid = hyper_grid,
num.trees =  300,
importance = "none"
)
# build models without importance calculation
rf_tree <- caret::train(
x = tpm_train[,tfs],
y = tpm_train[,gene],
method = "bstTree",
trControl = ctrl,
tuneGrid = hyper_grid
)
grid_res <- rf_tree$results
fwrite(grid_res, file = sprintf("data/hypergrid.bst.%s.csv",gene))
bst_tree <- rf_tree
rm(rf_tree)
# load grid search results
grid_res <- fread(sprintf("data/hypergrid.bst.%s.csv",gene))
ggplot(grid_res, aes(mstop, maxdepth, fill = RMSE)) +
geom_tile() + scale_fill_viridis_c(direction = -1)
grid_res
coolnames()
colnames(grid_res)
grid_res[!is.na(RMSE)]
grid_res <- grid_res[!is.na(RMSE)]
ggplot(grid_res, aes(mstop, maxdepth, fill = RMSE)) +
geom_tile() + scale_fill_viridis_c(direction = -1)
ggplot(grid_res, aes(mstop, nu, fill = RMSE)) +
geom_tile() + scale_fill_viridis_c(direction = -1)
ggplot(grid_res, aes(mstop, maxdepth, fill = RMSE)) +
geom_tile() + scale_fill_viridis_c(direction = -1)
grid_res
# parameter grid search
hyper_grid <- expand.grid(
mstop = seq(100, 200, 20),
maxdepth = seq(10, 30, 2),
nu = c(0.001, 0.01, 0.1)
)
# total number of combinations
nrow(hyper_grid)
# set up a 10-fold cross validation
ctrl <- trainControl(method = "cv",  number = 10)
# parameter grid with fixed best values
i <- which.min(grid_res$RMSE)
i
tuned_grid <- data.frame(
mstop = grid_res$mstop[i],
maxdepth = grid_res$maxdepth[i],
nu = grid_res$nu[i]
)
# CV rf model with importance calculation
bst_tree <- caret::train(
x = tpm_train[,tfs],
y = tpm_train[,gene],
method = "bstTree",
trControl = ctrl,
tuneGrid = tuned_grid,
importance = "permutation"
)
# CV rf model with importance calculation
bst_tree <- caret::train(
x = tpm_train[,tfs],
y = tpm_train[,gene],
method = "bstTree",
trControl = ctrl,
tuneGrid = tuned_grid
)
# assess results
bst_tree
# plot most important variables
varimp <- varImp(bst_tree)
plot(varimp, 30)
varimp_dt <- as.data.table(varimp$importance, keep.rownames = "Variable")[order(-Overall)][]
head(varimp_dt)
pred <- predict(bst_tree, tpm_test[, tfs])
RMSE(pred = pred, obs = tpm_test[, gene])
pred_df <- data.frame(predicted=pred, actual=tpm_test[, gene])
ggplot(pred_df, aes(predicted, actual)) +
geom_point() +
geom_smooth(method='lm', formula=y~x)
dt = fread("data/20220908101042.rmse.txt")
setnames(dt, c("genes","model","rmse"))
dt[, model:=factor(model, levels=c("decision_tree","bagging","random_forest","conditional_random_forest"))]
dt[, genes:=factor(genes, levels=unique(dt[model=="random_forest"][order(-rmse)]$genes))]
setorder(dt,genes,rmse)
ggplot(dt, aes(genes, rmse, color=model)) +
geom_line(aes(group=model)) +
geom_point() +
theme(
panel.grid.major.x = element_blank(),
axis.ticks.length.x = unit(0,"mm")
) + coord_flip()
var_imp <- fread("data/20220908101042.varimp.rf.txt")
var_imp
var_imp[,.N,gene]
var_imp
var_imp
var_imp[gene=="gene"]
var_imp = var_imp[!gene=="gene"]
fwrite(varimp, "data/20220908101042.varimp.rf.txt", sp = "\t")
fwrite(varimp, "data/20220908101042.varimp.rf.txt", sep = "\t")
var_imp[,.N,gene]
var_imp
setorder(var_imp, gene, varimp)
var_imp
setorder(var_imp, gene, -varimp)
var_imp
class(var_imp$varimp)
var_imp <- fread("data/20220908101042.varimp.rf.txt")
var_imp[,.N,gene]
var_imp
var_imp <- fread("data/20220908101042.varimp.rf.txt")
var_imp
var_imp <- fread("data/20220908101042.varimp.rf.txt")
var_imp
var_imp <- var_imp[gene!="gene"]
var_imp
fwrite(var_imp, "data/20220908101042.varimp.rf.txt", sep="\t")
var_imp <- fread("data/20220908101042.varimp.rf.txt")
var_imp
setorder(var_imp, gene, -varimp)
var_imp
var_imp[,.i:=.I]
var_imp
var_imp[,.i:=.I, by=gene]
var_imp
var_imp
var_imp[,.i:=1:nrow(SD), by=gene]
var_imp[,.i:=1:nrow(.SD), by=gene]
var_imp
ggplot(var_imp, aes(i,varimp)) +
geom_point()
var_imp
setnames(var_imp, ".i", "i")
ggplot(var_imp, aes(i, varimp)) +
geom_point()
ggplot(var_imp, aes(i, varimp)) +
geom_line()
gene
ggplot(var_imp, aes(i, varimp, group=gene)) +
geom_line()
ggplot(var_imp[i<100], aes(i, varimp, group=gene)) +
geom_line()
ggplot(var_imp[i<50], aes(i, varimp, group=gene)) +
geom_line()
var_imp
var_imp[varimp>25]
var_imp[varimp>50]
varimp_top <- var_imp[varimp>25]
require(igraph)
varimp_top <- var_imp[varimp>25]
?graph_from_data_frame
varimp_top
setcolorder(varimp_top, c("Variable", "gene", "varimp", "i"))
graph_from_data_frame(varimp_top, directed = TRUE)
plot(gp)
gp <- graph_from_data_frame(varimp_top, directed = TRUE)
plot(gp)
plot(gp)
require(ggraph)
gp
ggraph(gp, layout = "graphopt") +
geom_node_point(aes(size=Centrality, colour = label), show.legend = FALSE) +
geom_edge_link(aes(width = N), alpha = 0.8, show.legend = FALSE) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(label = label), repel = TRUE)
ggraph(gp, layout = "graphopt") +
geom_node_point(aes(colour = label), show.legend = FALSE) +
geom_edge_link(aes(width = N), alpha = 0.8, show.legend = FALSE) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(label = label), repel = TRUE)
?ggraph
nodes <- varimp_dt[,1:2]
nodes
nodes <- data.table(id = unique(c(var_imp$Variable, var_imp$gene)))
edges <- varimp_dt[,1:2]
gp_tidy <- tbl_graph(nodes = nodes, edges = edges, directed = FALSE)
gp_tidy <- as_tbl_graph(nodes = nodes, edges = edges, directed = FALSE)
library(idygraph )
library(tidygraph)
require(tidygraph)
gp_tidy <- tbl_graph(nodes = nodes, edges = edges, directed = FALSE)
edges
edges
nodes <- data.frame(id = unique(c(var_imp$Variable, var_imp$gene)))
edges <- data.frame(from=var_imp$Variable, to=var_imp$gene)
gp_tidy <- tbl_graph(nodes = nodes, edges = edges, directed = FALSE)
gp_tidy
ggraph(gp, layout = "graphopt") +
#geom_node_point(aes(colour = label), show.legend = FALSE) +
#geom_edge_link(aes(width = N), alpha = 0.8, show.legend = FALSE) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(label = label), repel = TRUE)
ggraph(gp, layout = "graphopt") +
#geom_node_point(aes(colour = label), show.legend = FALSE) +
#geom_edge_link(aes(width = N), alpha = 0.8, show.legend = FALSE) +
scale_edge_width(range = c(0.2, 2)) +
#geom_node_text(aes(label = label), repel = TRUE)
ggraph(gp, layout = "graphopt") +
#geom_node_point(aes(colour = label), show.legend = FALSE) +
#geom_edge_link(aes(width = N), alpha = 0.8, show.legend = FALSE) +
scale_edge_width(range = c(0.2, 2))
gp_tidy
gp_tidy$centrality = centrality_degree(mode = 'in')
mutate(centrality = centrality_degree(mode = 'in')
gp_tidy <- tbl_graph(nodes = nodes, edges = edges, directed = FALSE)  %>%
gp_tidy <- tbl_graph(nodes = nodes, edges = edges, directed = FALSE)  %>%
mutate(centrality = centrality_degree(mode = 'in'))
edges <- data.frame(from=var_imp$Variable, to=var_imp$gene, importance=var_imp$varimp)
ggraph(gp, layout = "graphopt") +
geom_node_point(aes(size = centrality), show.legend = FALSE) +
geom_edge_link(aes(width = importance), alpha = 0.8, show.legend = FALSE) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(label = id), repel = TRUE)
ggraph(gp_tidy, layout = "graphopt") +
geom_node_point(aes(size = centrality), show.legend = FALSE) +
geom_edge_link(aes(width = importance), alpha = 0.8, show.legend = FALSE) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(label = id), repel = TRUE)
edges
gp_tidy
gp_tidy <- tbl_graph(nodes = nodes, edges = edges, directed = FALSE)  %>%
mutate(centrality = centrality_degree(mode = 'in')) %>%
mutate(importance = var_imp$varimp)
edges
nodes <- data.frame(id = unique(c(varimp_top$Variable, varimp_top$gene)))
edges <- data.frame(from=varimp_top$Variable, to=varimp_top$gene, importance=varimp_top$varimp)
gp_tidy <- tbl_graph(nodes = nodes, edges = edges, directed = FALSE)  %>%
mutate(centrality = centrality_degree(mode = 'in')) %>%
mutate(importance = varimp_top$varimp)
gp_tidy <- tbl_graph(nodes = nodes, edges = edges, directed = FALSE)  %>%
mutate(centrality = centrality_degree(mode = 'in'))
ggraph(gp_tidy, layout = "graphopt") +
geom_node_point(aes(size = centrality), show.legend = FALSE) +
geom_edge_link( alpha = 0.8, show.legend = FALSE) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(label = id), repel = TRUE)
gp_plot <- ggraph(gp_tidy, layout = "graphopt") +
geom_node_point(aes(size = centrality), show.legend = FALSE) +
geom_edge_link(alpha = 0.8, show.legend = FALSE) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(label = id), repel = TRUE)
gp_plot
nodes <- data.frame(id = unique(c(varimp_top$Variable, varimp_top$gene)))
edges <- data.frame(from=varimp_top$Variable, to=varimp_top$gene, importance=varimp_top$varimp)
gp_plot <- ggraph(gp_tidy, layout = "graphopt") +
geom_node_point(aes(size = centrality), show.legend = FALSE) +
geom_edge_link(aes(alpha = importance), show.legend = FALSE) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(label = id), repel = TRUE)
gp_plot
gp_plot <- ggraph(gp_tidy, layout = "graphopt") +
geom_node_point(aes(size = centrality), show.legend = FALSE) +
geom_edge_link(aes(alpha = importance), show.legend = FALSE) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(filter=centrality > .6,label = label), repel = TRUE)
gp_plot
gp_plot <- ggraph(gp_tidy, layout = "graphopt") +
geom_node_point(aes(size = centrality), show.legend = FALSE) +
geom_edge_link(aes(alpha = importance), show.legend = FALSE) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(filter=centrality > .6,label = id), repel = TRUE)
gp_plot
gp_tidy
gp_tidy$centrality
gp_tidy@centrality
gp_plot <- ggraph(gp_tidy, layout = "graphopt") +
geom_node_point(aes(size = centrality), show.legend = FALSE) +
geom_edge_link(aes(alpha = importance), show.legend = FALSE) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(filter=centrality > 5, label = id), repel = TRUE)
gp_plot
gp_plot <- ggraph(gp_tidy, layout = "graphopt") +
geom_node_point(aes(size = centrality), show.legend = FALSE) +
geom_edge_link(aes(alpha = importance), show.legend = FALSE) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(filter=centrality > 5, label = id), color="red", repel = TRUE)
gp_plot
gp_plot <- ggraph(gp_tidy, layout = "graphopt") +
geom_node_point(aes(size = centrality), show.legend = FALSE) +
geom_edge_link(aes(alpha = importance), show.legend = FALSE) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(filter=centrality > 4, label = id), color="red", repel = TRUE)
gp_plot
set.seed(1950)
require(tidygraph)
set.seed(1950)
nodes <- data.frame(id = unique(c(varimp_top$Variable, varimp_top$gene)))
edges <- data.frame(from=varimp_top$Variable, to=varimp_top$gene, importance=varimp_top$varimp)
gp_tidy <- tbl_graph(nodes = nodes, edges = edges, directed = FALSE)  %>%
mutate(centrality = centrality_degree(mode = 'in'))
gp_plot <- ggraph(gp_tidy, layout = "graphopt") +
geom_node_point(aes(size = centrality), show.legend = FALSE) +
geom_edge_link(aes(alpha = importance), show.legend = FALSE) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(filter=centrality > 4, label = id), color="red", repel = TRUE)
gp_plot
gp_plot <- ggraph(gp_tidy, layout = "graphopt") +
geom_node_point(aes(size = centrality), show.legend = FALSE) +
geom_edge_link(aes(alpha = importance), show.legend = FALSE) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(filter=centrality > 3, label = id), color="red", repel = TRUE)
gp_plot
