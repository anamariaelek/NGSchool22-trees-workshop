y = tpm_train[,gene],
method = "cforest",
trControl = ctrl,
tuneGrid = hyper_grid,
num.trees =  300,
importance = "none"
)
# build models without CV or importance calculation
rf_tree <- caret::train(
x = tpm_train[,tfs],
y = tpm_train[,gene],
method = "cforest",
trControl = ctrl,
tuneGrid = hyper_grid
)
# save
grid_res <- rf_tree$results
grid_res
# parameter grid search
hyper_grid <- expand.grid(
mtry = seq(50, 1000, by = 50)
)
# total number of combinations
nrow(hyper_grid)
# build models without CV or importance calculation
rf_tree <- caret::train(
x = tpm_train[,tfs],
y = tpm_train[,gene],
method = "cforest",
trControl = ctrl,
tuneGrid = hyper_grid
)
rf_tree
# save
grid_res <- rf_tree$results
grid_res
fwrite(grid_res, file = sprintf("data/hypergrid.crf.%s.csv",gene))
grid_res
# plot
ggplot(grid_res, aes(min.node.size, mtry, fill = RMSE)) +
geom_tile() + scale_fill_viridis_c(direction = -1)
# load grid search results
grid_res <- fread(sprintf("data/hypergrid.rf.%s.csv",gene))
# plot
ggplot(grid_res, aes(min.node.size, mtry, fill = RMSE)) +
geom_tile() + scale_fill_viridis_c(direction = -1)
# top ones
grid_res[order(RMSE)][1:5]
# load grid search results
grid_res1 <- fread(sprintf("data/hypergrid.rf.%s.csv",gene))
# parameter grid search
hyper_grid <- expand.grid(
mtry = seq(1050, 1250, by = 50)
)
# total number of combinations
nrow(hyper_grid)
# build models without CV or importance calculation
rf_tree <- caret::train(
x = tpm_train[,tfs],
y = tpm_train[,gene],
method = "cforest",
trControl = ctrl,
tuneGrid = hyper_grid
)
# save
grid_res <- rbind(grid_res1, rf_tree$results)
grid_res
grid_res1
grid_res
rbind(grid_res1, rf_tree$results)
grid_res1
rf_tree$results
# save
grid_res <- rbind(grid_res1, as.data.table(rf_tree$results))
as.data.table(rf_tree$results)
cbind(grid_res1, rf_tree$results)
# save
grid_res <- rbindlist(list(grid_res1, as.data.table(rf_tree$results))
# plot
ggplot(grid_res, aes(min.node.size, mtry, fill = RMSE)) +
# plot
ggplot(grid_res, aes(min.node.size, mtry, fill = RMSE)) +
geom_tile() + scale_fill_viridis_c(direction = -1)
fwrite(grid_res, file = sprintf("data/hypergrid.crf.%s.csv",gene))
# set up a 10-fold cross validation
ctrl <- trainControl(method = "cv",  number = 10)
# parameter grid with fixed best values
i <- which.min(grid_res$RMSE)
tuned_grid <- expand.grid(
splitrule = "variance",
mtry = grid_res$mtry[i],
min.node.size = grid_res$min.node.size[i]
)
# CV rf model with importance calculation
rf_tree <- caret::train(
x = tpm_train[,tfs],
y = tpm_train[,gene],
method = "ranger",
trControl = ctrl,
tuneGrid = tuned_grid,
num.trees = 300,
importance = "permutation"
)
# CV rf model with importance calculation
crf_tree <- caret::train(
x = tpm_train[,tfs],
y = tpm_train[,gene],
method = "cforest",
trControl = ctrl,
tuneGrid = tuned_grid
)
tuned_grid <- expand.grid(
mtry = grid_res$mtry[i]
)
# CV rf model with importance calculation
crf_tree <- caret::train(
x = tpm_train[,tfs],
y = tpm_train[,gene],
method = "cforest",
trControl = ctrl,
tuneGrid = tuned_grid
)
# assess results
crf_tree
pred <- predict(crf_tree, tpm_test[, tfs])
RMSE(pred = pred, obs = tpm_test[, gene])
pred_df <- data.frame(predicted=pred, actual=tpm_test[, gene])
ggplot(pred_df, aes(predicted, actual)) +
geom_point() +
geom_smooth(method='lm', formula=y~x)
RMSE(pred = pred, obs = tpm_test[, gene])
varImp(crf_tree)
class(varImp(crf_tree))
class(varImp(crf_tree)$importance)
rocimp <- filterVarImp(x = tpm_train[,tfs], y = tpm_train[,gene])
rocimp
pred_df <- data.frame(predicted=pred, actual=tpm_test[, gene])
ggplot(pred_df, aes(predicted, actual)) +
geom_point() +
geom_smooth(method='lm', formula=y~x)
rocimp <- as.data.table(rocimp, keep.rownames = "Variable")
# roc
rocimp <- filterVarImp(x = tpm_train[,tfs], y = tpm_train[,gene])
# roc
rocimp <- filterVarImp(x = tpm_train[,tfs], y = tpm_train[,gene])
rocimp <- as.data.table(rocimp, keep.rownames = "Variable")
rocimp
rocimp[order(Overall)]
rocimp[order(-Overall)]
# plot most important variables
varimp <- varImp(rf_tree)
varimp$importance
rocimp[order(-Overall)]
as.data.table(varimp$importance)[order(-Overall)]
as.data.table(varimp$importance, keep.rownames = "Variable")[order(-Overall)]
rocimp[order(-Overall)]
View(rocimp)
RMSE(pred = pred, obs = tpm_test[, gene])
varimp
plot(varimp, 30)
varimp
res_dir <- "data"
dir.create(res_dir, showWarnings = FALSE)
# load expression data
url <- "https://storage.googleapis.com/gtex_analysis_v8/rna_seq_data/gene_reads/gene_reads_2017-06-05_v8_lung.gct.gz"
dt <- fread(url)
# load TFs
url <- "http://humantfs.ccbr.utoronto.ca/download/v_1.01/TFs_Ensembl_v_1.01.txt"
tfs <- readLines(url)
# strip transcript ID from GTEx data
dt[, Name := str_remove(Name, "\\.\\d+$")]
# add TF info
dt[,TF := ifelse(Name %in% tfs, TRUE, FALSE)]
setcolorder(dt, c("id", "Name", "Description", "TF"))
# we will use more informative gene names instead of ensembl IDs
dt[,Description:=str_replace(Description,"-","_")] # - causes formula to break
tfs <- dt[TF == TRUE, Description]
# get only expression vlues for models
tpm <- as.data.frame(t(dt[,-c(1:4)]))
colnames(tpm) <- dt$Description
# remove genes not expressed in any sample
not_expressed <- which(colSums(tpm) == 0)
message(
length(not_expressed), " not expressed genes, of which ",
sum(names(not_expressed) %in% tfs), " TFs"
)
tpm <- tpm[, -not_expressed]
# log transform
tpm <- log(tpm+1)
quants <- t(apply(tpm, 1, quantile))
head(quants)
# how many TFs (i.e. variables) we have left?
tfs <- tfs[tfs %in% colnames(tpm)]
length(tfs)
# remove lowly expressed genes (important for TFs, i.e. variables)
low_expressed <- which(colSums(tpm) < 100)
message(
length(low_expressed), " lowly expressed genes, of which ",
sum(names(low_expressed) %in% tfs), " TFs"
)
tpm <- tpm[, -low_expressed]
# keep tfs for modeling
all_tfs <- tfs[tfs %in% colnames(tpm)]
# train-test split
set.seed(1950)
tpm_train_id <- sample(1:nrow(tpm), size = 0.9*nrow(tpm))
tpm_train <- tpm[tpm_train_id, ]
tpm_test  <- tpm[-tpm_train_id, ]
message( nrow(tpm_train), " training samples")
message( nrow(tpm_test), " test samples")
message(length(tfs), " features")
# outcome variables
genes_ord <- sort(colSums(tpm), decreasing = TRUE)
genes_ord <- genes_ord[!grepl("MT_",names(genes_ord))]
match(rownames(varimp$importance), names(genes_ord))
match(rownames(varimp$importance), names(genes_ord)[1:100])
sum(rownames(varimp$importance) %in% names(genes_ord))
sum(rownames(varimp$importance) %in% names(genes_ord)[1:100])
sum(rownames(varimp$importance) %in% names(genes_ord)[1:200])
sum(rownames(varimp$importance) %in% names(genes_ord)[1:300])
varimp_dt <- as.data.table(varimp$importance, keep.rownames = "Variable")[order(-Overall)]
varimp_dt
rocimp_dt <- as.data.table(rocimp, keep.rownames = "Variable")
rocimp_dt <- as.data.table(rocimp, keep.rownames = "Variable") rocimp[order(-Overall)]
rocimp_dt <- as.data.table(rocimp, keep.rownames = "Variable")[order(-Overall)]
head(rocimp_dt)
rocimp_dt
sum(rocimp_dt$Variable %in% names(genes_ord)[1:300])
sum(rocimp_dt$Variable[1:100] %in% names(genes_ord)[1:300])
sum(rocimp_dt$Variable[1:30] %in% names(genes_ord)[1:300])
match(rocimp_dt$Variable[1:30] %in% names(genes_ord))
match(rocimp_dt$Variable[1:30], names(genes_ord))
url <- "https://storage.googleapis.com/gtex_analysis_v8/rna_seq_data/gene_reads/gene_reads_2017-06-05_v8_lung.gct.gz"
dt <- fread(url)
dim(dt)
dt[1:10,1:10]
library(data.table)
library(stringr)
library(ggplot2)
library(caret)
library(rpart)
library(rpart.plot)
library(ipred)
library(ranger)
library(party)
url <- "https://storage.googleapis.com/gtex_analysis_v8/rna_seq_data/gene_reads/gene_reads_2017-06-05_v8_lung.gct.gz"
dt <- fread(url)
dim(dt)
dt[1:10,1:10]
url <- "http://humantfs.ccbr.utoronto.ca/download/v_1.01/TFs_Ensembl_v_1.01.txt"
tfs <- readLines(url)
head(tfs)
length(tfs)
# strip transcript ID from GTEx data
dt[, Name := str_remove(Name, "\\.\\d+$")]
# add TF info
dt[,TF := ifelse(Name %in% tfs, TRUE, FALSE)]
setcolorder(dt, c("id", "Name", "Description", "TF"))
# most of TFs are present in our GTEx data.
dt[, .N, TF]
# we will use more informative gene names instead of ensembl IDs
tfs <- dt[TF == TRUE, Description]
# extract only TPM values
tpm <- dt[,-c(1:4)]
# transpose to have observations in rows and features in columns
tpm <- as.data.frame(t(tpm))
colnames(tpm) <- dt$Description
quants <- t(apply(tpm, 1, quantile))
head(quants)
# remove genes not expressed in any sample
not_expressed <- which(colSums(tpm) == 0)
length(not_expressed)
tpm <- tpm[, -not_expressed]
quants <- t(apply(tpm, 1, quantile))
head(quants)
# log transform
tpm <- log(tpm+1)
quants <- t(apply(tpm, 1, quantile))
head(quants)
# remove lowly expressed genes
hist(colSums(tpm), breaks = 100); abline(v=100, col="red")
low_expressed <- which(colSums(tpm) < 100)
sum(names(low_expressed) %in% tfs)
tpm <- tpm[, -low_expressed]
# how many TFs (i.e. variables) we have left?
tfs <- tfs[tfs %in% colnames(tpm)]
length(tfs)
# TPM distribution for TFs vs non-TFs
dtm <- reshape2::melt(tpm, value.name = "TPM")
dtm$TF <- ifelse(dtm$variable %in% tfs, TRUE, FALSE)
gp <- ggplot(dtm, aes(TPM, fill=TF)) +
geom_histogram(bins=100) +
scale_x_log10() +
scale_fill_viridis_d() +
facet_grid(TF~., scales = "free_y", labeller = label_both) +
theme(legend.position = "none")
gp
set.seed(1950)
tpm_train_id <- sample(1:nrow(tpm), size = 0.9 * nrow(tpm))
tpm_train <- tpm[tpm_train_id, ]; nrow(tpm_train)
tpm_test  <- tpm[-tpm_train_id, ]; nrow(tpm_test)
# outcome variable
gene <- "EPAS1"
# predictor variables
tfs <- setdiff(tfs, gene)
require(rpart)
set.seed(1950)
# build tree
tpm_tree <- rpart(
formula = as.formula(paste(gene, "~ .", collapse = " ")),
data = tpm_train[,c(gene,tfs)],
method = "anova" # for regression
)
# plot tree
require(rpart.plot)
rpart.plot(tpm_tree)
plotcp(tpm_tree)
# get stats for different cp values
tpm_tree$cptable
hyper_grid <- expand.grid(
minsplit = seq(20, 40, 1),
maxdepth = seq(20, 40, 1)
)
nrow(hyper_grid)
# loop over grid search
set.seed(1950)
tpm_list <- lapply(1:nrow(hyper_grid), function(i) {
# train a model
tpm_tree <- rpart(
formula = as.formula(paste(gene, "~ .", collapse = " ")),
data = tpm_train[, c(gene,tfs)],
method  = "anova",
control = list(
minsplit = hyper_grid$minsplit[i],
maxdepth = hyper_grid$maxdepth[i]
)
)
# get error
tpm_tree$cptable[which.min(tpm_tree$cptable[,"xerror"]),]
})
# merge results
tpm_cp <- do.call('rbind', tpm_list)
# add results to grid
hyper_grid <- cbind(hyper_grid, tpm_cp)
# save
fwrite(hyper_grid, file = sprintf("data/hypergrid.tree.%s.csv",gene))
hyper_grid <- fread(sprintf("data/hypergrid.tree.%s.csv",gene))
head(hyper_grid[order(xerror)])
# plot grid search results
ggplot(hyper_grid, aes(minsplit, maxdepth, fill = xerror)) +
geom_tile() + coord_fixed() + scale_fill_viridis_c(direction = -1)
# build the model using best parameters from grid search
i <- which.min(hyper_grid$xerror)
tpm_best_tree <- rpart(
formula = as.formula(paste(gene, "~ .", collapse = " ")),
data = tpm_train[, c(gene,tfs)],
method  = "anova",
control = list(
minsplit = hyper_grid$minsplit[i],
maxdepth = hyper_grid$maxdepth[i],
cp = hyper_grid$CP[i]
)
)
# plot tree
rpart.plot(tpm_tree)
pred <- predict(tpm_best_tree, newdata = tpm_test[, tfs])
RMSE(pred = pred, obs = tpm_test[, gene])
pred_df <- data.frame(predicted=pred, actual=tpm_test[, gene])
ggplot(pred_df, aes(predicted, actual)) +
geom_point() +
geom_smooth(method='lm', formula=y~x)
require(ipred)
set.seed(1950)
# get OOB errors for models with range of bagged trees
nbagg <- seq(10, 200, 2)
rmse <- sapply(nbagg, function(i) {
bt <- bagging(
formula = as.formula(paste(gene, "~ .", collapse = " ")),
data = tpm_train[,c(gene,tfs)],
coob = TRUE,
nbagg = i
)
bt$err
})
# hyperparameter grid search
hyper_grid <- expand.grid(
ntree = 200,
mtry = seq(250, 550, by = 10),
sample.fraction = seq(0.8, 1, 0.1),
min.node.size = seq(8, 10, by = 2)
)
# total number of combinations
nrow(hyper_grid)
rmse_df <- data.frame(nbagg, rmse)
fwrite(rmse_df, file = sprintf("data/hypergrid.bagging.%s.csv",gene))
# load precalculated values
rmse_df <- fread(sprintf("data/hypergrid.bagging.%s.csv",gene))
ggplot(rmse_df, aes(nbagg, rmse)) +
geom_line() +
geom_vline(xintercept = 25, col = "red")
# fit model using these parameters
ntree <- rmse_df[which.min(rmse_df$rmse),]$nbagg
bagging_tree <- bagging(
formula = as.formula(paste(gene, "~ .", collapse = " ")),
data = tpm_train[,c(gene,tfs)],
coob = TRUE,
nbagg = ntree
)
pred <- predict(bagging_tree, newdata = tpm_test[, tfs])
RMSE(pred = pred, obs = tpm_test[, gene])
pred_df <- data.frame(predicted=pred, actual=tpm_test[, gene])
ggplot(pred_df, aes(predicted, actual)) +
geom_point() +
geom_smooth(method='lm', formula=y~x)
require(caret)
# set up a 10-fold cross validation
ctrl <- trainControl(method = "cv",  number = 10)
# CV bagged model
bagging_tree <- caret::train(
x = tpm_train[,tfs],
y = tpm_train[,gene],
method = "treebag",
num.trees = ntree,
trControl = ctrl,
importance = TRUE
)
# assess results
bagging_tree
# plot most important variables
plot(varImp(bagging_tree), 30)
# set up a 3-fold cross validation
ctrl <- trainControl(method = "cv",  number = 3)
# parameter grid search
hyper_grid <- expand.grid(
splitrule = "variance", # has to be included even if not changing it
mtry = seq(50, 1000, by = 50),
min.node.size = seq(5, 12, by = 1)
)
# total number of combinations
nrow(hyper_grid)
# build models without CV or importance calculation
rf_tree <- caret::train(
x = tpm_train[,tfs],
y = tpm_train[,gene],
method = "ranger",
trControl = ctrl,
tuneGrid = hyper_grid,
num.trees =  300,
importance = "none"
)
# save
grid_res <- rf_tree$results
fwrite(grid_res, file = sprintf("data/hypergrid.rf.%s.csv",gene))
# load grid search results
grid_res <- fread(sprintf("data/hypergrid.rf.%s.csv",gene))
# plot
ggplot(grid_res, aes(min.node.size, mtry, fill = RMSE)) +
geom_tile() + scale_fill_viridis_c(direction = -1)
# top ones
grid_res[order(RMSE)][1:5]
require(caret)
# set up a 10-fold cross validation
ctrl <- trainControl(method = "cv",  number = 10)
# parameter grid with fixed best values
i <- which.min(grid_res$RMSE)
tuned_grid <- expand.grid(
splitrule = "variance",
mtry = grid_res$mtry[i],
min.node.size = grid_res$min.node.size[i]
)
# CV rf model with importance calculation
rf_tree <- caret::train(
x = tpm_train[,tfs],
y = tpm_train[,gene],
method = "ranger",
trControl = ctrl,
tuneGrid = tuned_grid,
num.trees = 300,
importance = "permutation"
)
# assess results
rf_tree
# plot most important variables
varimp <- varImp(rf_tree)
plot(varimp, 30)
as.data.table(varimp$importance, keep.rownames = "Variable")[order(-Overall)]
# roc
rocimp <- filterVarImp(x = tpm_train[,tfs], y = tpm_train[,gene])
rocimp <- as.data.table(rocimp, keep.rownames = "Variable")
rocimp[order(-Overall)]
pred <- predict(rf_tree, tpm_test[, tfs])
RMSE(pred = pred, obs = tpm_test[, gene])
pred_df <- data.frame(predicted=pred, actual=tpm_test[, gene])
ggplot(pred_df, aes(predicted, actual)) +
geom_point() +
geom_smooth(method='lm', formula=y~x)
# set up a 3-fold cross validation
ctrl <- trainControl(method = "cv",  number = 3)
# parameter grid search
hyper_grid <- expand.grid(
mtry = seq(1050, 1250, by = 50)
)
# total number of combinations
nrow(hyper_grid)
# build models without CV or importance calculation
crf_tree <- caret::train(
x = tpm_train[,tfs],
y = tpm_train[,gene],
method = "cforest",
trControl = ctrl,
tuneGrid = hyper_grid
)
